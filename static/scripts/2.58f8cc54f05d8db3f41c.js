(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"2tSu":function(t,e,n){"use strict";var i=n("1OyB"),o=n("md7G"),r=n("foSv"),s=n("JX7q"),a=n("Ji7U");n.d(e,"a",(function(){return c}));var l={ambient:.35,diffuse:.6,shininess:32,specularColor:[30,30,30]},c=function(t){function e(t){var n;return Object(i.a)(this,e),n=Object(o.a)(this,Object(r.a)(e).call(this,t)),t=Object.assign({},l,t),Object.assign(Object(s.a)(n),t),n}return Object(a.a)(e,(function t(){Object(i.a)(this,t)})),e}()},"3DrS":function(t,e,n){"use strict";n.d(e,"b",(function(){return v})),n.d(e,"c",(function(){return d})),n.d(e,"a",(function(){return h}));var i=n("VmRL"),o=n.n(i);function r(t){if(t=t&&t.positions||t,!Array.isArray(t)&&!ArrayBuffer.isView(t))throw new Error("invalid polygon")}function s(t){return t.length>=1&&t[0].length>=2&&Number.isFinite(t[0][0])}function a(t){var e=t[0],n=t[t.length-1];return e[0]===n[0]&&e[1]===n[1]&&e[2]===n[2]}function l(t,e,n,i){for(var o=0;o<e;o++)if(t[n+o]!==t[i-e+o])return!1;return!0}function c(t,e,n,i){for(var o=e,r=n.length,s=0;s<r;s++)for(var l=0;l<i;l++)t[o++]=n[s][l]||0;if(!a(n))for(var c=0;c<i;c++)t[o++]=n[0][c]||0;return o}function u(t,e,n,i){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5?arguments[5]:void 0,s=(r=r||n.length)-o;if(s<=0)return e;for(var a=e,c=0;c<s;c++)t[a++]=n[o+c];if(!l(n,i,o,r))for(var u=0;u<i;u++)t[a++]=n[o+u];return a}function p(t){return(a(t)?0:1)+t.length}function f(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=arguments.length>3?arguments[3]:void 0;return n>=(i=i||t.length)?0:(l(t,e,n,i)?0:1)+(i-n)/e}function v(t,e){if(r(t),t.positions){var n=t,i=n.positions,o=n.holeIndices;if(o){for(var a=0,l=0;l<=o.length;l++)a+=f(t.positions,e,o[l-1],o[l]);return a}t=i}if(Number.isFinite(t[0]))return f(t,e);if(!s(t)){var c=0,u=!0,v=!1,d=void 0;try{for(var h,y=t[Symbol.iterator]();!(u=(h=y.next()).done);u=!0)c+=p(h.value)}catch(t){v=!0,d=t}finally{try{u||null==y.return||y.return()}finally{if(v)throw d}}return c}return p(t)}function d(t,e,n){r(t),n=n||v(t,e);var i=new Float64Array(n*e),o=[];if(t.positions){var a=t,l=a.positions,p=a.holeIndices;if(p){for(var f=0,d=0;d<=p.length;d++)f=u(i,f,l,e,p[d-1],p[d]),o.push(f);return o.pop(),{positions:i,holeIndices:o}}t=l}if(Number.isFinite(t[0]))return u(i,0,t,e),{positions:i,holeIndices:null};if(!s(t)){var h=0,y=!0,x=!1,g=void 0;try{for(var P,m=t[Symbol.iterator]();!(y=(P=m.next()).done);y=!0)h=c(i,h,P.value,e),o.push(h)}catch(t){x=!0,g=t}finally{try{y||null==m.return||m.return()}finally{if(x)throw g}}return o.pop(),{positions:i,holeIndices:o}}return c(i,0,t,e),{positions:i,holeIndices:null}}function h(t,e){var n=null;return t.holeIndices&&(n=t.holeIndices.map((function(t){return t/e}))),o()(t.positions,n,e)}},Im0j:function(t,e,n){"use strict";function i(t){for(var e=t.data,n=t.getIndex,i=t.dataRange,o=t.replace,r=i.startRow,s=void 0===r?0:r,a=i.endRow,l=void 0===a?1/0:a,c=e.length,u=c,p=c,f=0;f<c;f++){var v=n(e[f]);if(u>f&&v>=s&&(u=f),v>=l){p=f;break}}for(var d=u,h=p-u!==o.length,y=h&&e.slice(p),x=0;x<o.length;x++)e[d++]=o[x];if(h){for(var g=0;g<y.length;g++)e[d++]=y[g];e.length=d}return{startRow:u,endRow:u+o.length}}n.d(e,"a",(function(){return i}))},KHNG:function(t,e,n){"use strict";var i=n("1OyB"),o=n("vuIU"),r=n("md7G"),s=n("foSv"),a=n("ReuC"),l=n("Ji7U"),c=n("K7jV"),u=n("2tSu"),p=n("d3kR"),f=n("tMmZ"),v=n("S2EH"),d=n("C7oE"),h=n("3DrS"),y=function(t){function e(t){var n=t.data,o=t.getGeometry,a=t.fp64,l=t.positionFormat,c=t.IndexType,u=void 0===c?Uint32Array:c;return Object(i.a)(this,e),Object(r.a)(this,Object(s.a)(e).call(this,{data:n,getGeometry:o,positionFormat:l,attributes:{positions:{size:3,type:a?Float64Array:Float32Array},vertexValid:{type:Uint8ClampedArray,size:1},indices:{type:u,size:1}}}))}return Object(l.a)(e,t),Object(o.a)(e,[{key:"get",value:function(t){return"indices"===t?this.attributes.indices.subarray(0,this.vertexCount):this.attributes[t]}},{key:"getGeometrySize",value:function(t){return h.b(t,this.positionSize)}},{key:"updateGeometryAttributes",value:function(t,e){t=h.c(t,this.positionSize,e.geometrySize),this._updateIndices(t,e),this._updatePositions(t,e)}},{key:"_updateIndices",value:function(t,e){var n=e.geometryIndex,i=e.vertexStart,o=e.indexStart,r=this.attributes,s=this.indexLayout,a=this.typedArrayManager,l=r.indices,c=o,u=h.a(t,this.positionSize);l=a.allocate(l,o+u.length,{copy:!0});for(var p=0;p<u.length;p++)l[c++]=u[p]+i;s[n]=u.length,r.indices=l}},{key:"_updatePositions",value:function(t,e){for(var n=e.vertexStart,i=e.geometrySize,o=this.attributes,r=o.positions,s=o.vertexValid,a=this.positionSize,l=n,c=t.positions,u=t.holeIndices,p=0;p<i;p++){var f=c[p*a],v=c[p*a+1],d=a>2?c[p*a+2]:0;r[3*l]=f,r[3*l+1]=v,r[3*l+2]=d,s[l]=1,l++}if(u)for(var h=0;h<u.length;h++)s[n+u[h]/a-1]=0;s[n+i-1]=0}}]),e}(n("qI7z").experimental.Tesselator),x="\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform bool extruded;\nuniform bool isWireframe;\nuniform float elevationScale;\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying float isValid;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec4 lineColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec2 positions64xyLow;\n  vec2 nextPositions64xyLow;\n  float elevations;\n};\n\nvec3 project_offset_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  return project_normal(vector);\n}\n\nvoid calculatePosition(PolygonProps props) {\n  vec3 pos;\n  vec2 pos64xyLow;\n  vec3 normal;\n  vec4 colors = isWireframe ? props.lineColors : props.fillColors;\n\n  geometry.worldPosition = props.positions;\n  geometry.worldPositionAlt = props.nextPositions;\n\n#ifdef IS_SIDE_VERTEX\n  pos = mix(props.positions, props.nextPositions, vertexPositions.x);\n  pos64xyLow = mix(props.positions64xyLow, props.nextPositions64xyLow, vertexPositions.x);\n  isValid = vertexValid;\n#else\n  pos = props.positions;\n  pos64xyLow = props.positions64xyLow;\n  isValid = 1.0;\n#endif\n\n  if (extruded) {\n    pos.z += props.elevations * vertexPositions.y * elevationScale;\n    \n#ifdef IS_SIDE_VERTEX\n    normal = vec3(props.positions.y - props.nextPositions.y, props.nextPositions.x - props.positions.x, 0.0);\n    normal = project_offset_normal(normal);\n#else\n    normal = vec3(0.0, 0.0, 1.0);\n#endif\n    geometry.normal = normal;\n  }\n\n  gl_Position = project_position_to_clipspace(pos, pos64xyLow, vec3(0.), geometry.position);\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n\n  if (extruded) {\n    vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, normal);\n    vColor = vec4(lightColor, colors.a * opacity);\n  } else {\n    vColor = vec4(colors.rgb, colors.a * opacity);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n  picking_setPickingColor(props.pickingColors);\n}\n",g="#define SHADER_NAME solid-polygon-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec2 positions64xyLow;\nattribute float elevations;\nattribute vec4 fillColors;\nattribute vec4 lineColors;\nattribute vec3 pickingColors;\n\n".concat(x,"\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = positions;\n  props.positions64xyLow = positions64xyLow;\n  props.elevations = elevations;\n  props.fillColors = fillColors;\n  props.lineColors = lineColors;\n  props.pickingColors = pickingColors;\n\n  calculatePosition(props);\n}\n"),P="#define SHADER_NAME solid-polygon-layer-vertex-shader-side\n#define IS_SIDE_VERTEX\n\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute vec3 nextPositions;\nattribute vec2 nextPositions64xyLow;\nattribute float instanceElevations;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\n".concat(x,"\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = instancePositions;\n  props.positions64xyLow = instancePositions64xyLow;\n  props.elevations = instanceElevations;\n  props.fillColors = instanceFillColors;\n  props.lineColors = instanceLineColors;\n  props.pickingColors = instancePickingColors;\n  props.nextPositions = nextPositions;\n  props.nextPositions64xyLow = nextPositions64xyLow;\n\n  calculatePosition(props);\n}\n");n.d(e,"a",(function(){return C}));var m=[0,0,0,255],b=new u.a,L={filled:!0,extruded:!1,wireframe:!1,elevationScale:{type:"number",min:0,value:1},getPolygon:{type:"accessor",value:function(t){return t.polygon}},getElevation:{type:"accessor",value:1e3},getFillColor:{type:"accessor",value:m},getLineColor:{type:"accessor",value:m},material:b},S={enter:function(t,e){return e.length?e.subarray(e.length-t.length):t}},C=function(t){function e(){return Object(i.a)(this,e),Object(r.a)(this,Object(s.a)(e).apply(this,arguments))}return Object(l.a)(e,t),Object(o.a)(e,[{key:"getShaders",value:function(t){return Object(a.a)(Object(s.a)(e.prototype),"getShaders",this).call(this,{vs:t,fs:"#define SHADER_NAME solid-polygon-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float isValid;\n\nvoid main(void) {\n  if (isValid < 0.5) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",defines:{},modules:["project32","gouraud-lighting","picking"]})}},{key:"initializeState",value:function(){var t=this,e=this.context.gl;this.setState({numInstances:0,polygonTesselator:new y({fp64:this.use64bitPositions(),IndexType:!e||Object(p.b)(e,f.a.ELEMENT_INDEX_UINT32)?Uint32Array:Uint16Array})});var n=this.getAttributeManager();n.remove(["instancePickingColors"]),n.add({indices:{size:1,isIndexed:!0,update:this.calculateIndices,noAlloc:!0},positions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:S,accessor:"getPolygon",update:this.calculatePositions,noAlloc:!0,shaderAttributes:{positions:{offset:0,divisor:0},instancePositions:{offset:0,divisor:1},nextPositions:{offset:12,divisor:1}}},vertexValid:{size:1,divisor:1,type:5121,update:this.calculateVertexValid,noAlloc:!0},elevations:{size:1,transition:S,accessor:"getElevation",shaderAttributes:{elevations:{divisor:0},instanceElevations:{divisor:1}}},fillColors:{alias:"colors",size:this.props.colorFormat.length,type:5121,normalized:!0,transition:S,accessor:"getFillColor",defaultValue:m,shaderAttributes:{fillColors:{divisor:0},instanceFillColors:{divisor:1}}},lineColors:{alias:"colors",size:this.props.colorFormat.length,type:5121,normalized:!0,transition:S,accessor:"getLineColor",defaultValue:m,shaderAttributes:{lineColors:{divisor:0},instanceLineColors:{divisor:1}}},pickingColors:{size:3,type:5121,accessor:function(e,n){var i=n.index,o=n.target;return t.encodePickingColor(i,o)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}},{key:"draw",value:function(t){var e=t.uniforms,n=this.props,i=n.extruded,o=n.filled,r=n.wireframe,s=n.elevationScale,a=this.state,l=a.topModel,c=a.sideModel,u=a.polygonTesselator,p=Object.assign({},e,{extruded:Boolean(i),elevationScale:s});c&&(c.setInstanceCount(u.instanceCount-1),c.setUniforms(p),r&&(c.setDrawMode(3),c.setUniforms({isWireframe:!0}).draw()),o&&(c.setDrawMode(6),c.setUniforms({isWireframe:!1}).draw())),l&&(l.setVertexCount(u.get("indices").length),l.setUniforms(p).draw())}},{key:"updateState",value:function(t){Object(a.a)(Object(s.a)(e.prototype),"updateState",this).call(this,t),this.updateGeometry(t);var n=t.props,i=t.oldProps,o=t.changeFlags,r=this.getAttributeManager();(o.extensionsChanged||n.filled!==i.filled||n.extruded!==i.extruded)&&(this.state.models&&this.state.models.forEach((function(t){return t.delete()})),this.setState(this._getModels(this.context.gl)),r.invalidateAll())}},{key:"updateGeometry",value:function(t){var e=t.props,n=(t.oldProps,t.changeFlags);if(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getPolygon)){var i=this.state.polygonTesselator;i.updateGeometry({data:e.data,getGeometry:e.getPolygon,positionFormat:e.positionFormat,fp64:this.use64bitPositions(),dataChanged:n.dataChanged}),this.setState({numInstances:i.instanceCount,bufferLayout:i.bufferLayout}),n.dataChanged||this.getAttributeManager().invalidateAll()}}},{key:"_getModels",value:function(t){var e,n,i=this.props,o=i.id,r=i.filled,s=i.extruded;if(r){var a=this.getShaders(g);a.defines.NON_INSTANCED_MODEL=1,e=new v.a(t,Object.assign({},a,{id:"".concat(o,"-top"),drawMode:4,attributes:{vertexPositions:new Float32Array([0,1])},uniforms:{isWireframe:!1,isSideVertex:!1},vertexCount:0,isIndexed:!0}))}return s&&((n=new v.a(t,Object.assign({},this.getShaders(P),{id:"".concat(o,"-side"),geometry:new d.a({drawMode:1,vertexCount:4,attributes:{vertexPositions:{size:2,value:new Float32Array([1,1,0,1,0,0,1,0])}}}),instanceCount:0,isInstanced:1}))).userData.excludeAttributes={indices:!0}),{models:[n,e].filter(Boolean),topModel:e,sideModel:n}}},{key:"calculateIndices",value:function(t){var e=this.state.polygonTesselator;t.bufferLayout=e.indexLayout,t.value=e.get("indices")}},{key:"calculatePositions",value:function(t){var e=this.state.polygonTesselator;t.bufferLayout=e.bufferLayout,t.value=e.get("positions")}},{key:"calculateVertexValid",value:function(t){t.value=this.state.polygonTesselator.get("vertexValid")}}]),e}(c.a);C.layerName="SolidPolygonLayer",C.defaultProps=L},VmRL:function(t,e,n){"use strict";function i(t,e,n){n=n||2;var i,a,l,c,u,v,h,y=e&&e.length,x=y?e[0]*n:t.length,g=o(t,0,x,n,!0),P=[];if(!g)return P;if(y&&(g=function(t,e,n,i){var s,a,l,c=[];for(s=0,a=e.length;s<a;s++)(l=o(t,e[s]*i,s<a-1?e[s+1]*i:t.length,i,!1))===l.next&&(l.steiner=!0),c.push(d(l));for(c.sort(p),s=0;s<c.length;s++)f(c[s],n),n=r(n,n.next);return n}(t,e,g,n)),t.length>80*n){i=l=t[0],a=c=t[1];for(var m=n;m<x;m+=n)(u=t[m])<i&&(i=u),(v=t[m+1])<a&&(a=v),u>l&&(l=u),v>c&&(c=v);h=0!==(h=Math.max(l-i,c-a))?1/h:0}return s(g,P,n,i,a,h),P}function o(t,e,n,i,o){var r,s;if(o===w(t,e,n,i)>0)for(r=e;r<n;r+=i)s=L(r,t[r],t[r+1],s);else for(r=n-i;r>=e;r-=i)s=L(r,t[r],t[r+1],s);return s&&g(s,s.next)&&(S(s),s=s.next),s}function r(t,e){if(!t)return t;e||(e=t);var n,i=t;do{if(n=!1,i.steiner||!g(i,i.next)&&0!==x(i.prev,i,i.next))i=i.next;else{if(S(i),(i=e=i.prev)===i.next)break;n=!0}}while(n||i!==e);return e}function s(t,e,n,i,o,p,f){if(t){!f&&p&&function(t,e,n,i){var o=t;do{null===o.z&&(o.z=v(o.x,o.y,e,n,i)),o.prevZ=o.prev,o.nextZ=o.next,o=o.next}while(o!==t);o.prevZ.nextZ=null,o.prevZ=null,function(t){var e,n,i,o,r,s,a,l,c=1;do{for(n=t,t=null,r=null,s=0;n;){for(s++,i=n,a=0,e=0;e<c&&(a++,i=i.nextZ);e++);for(l=c;a>0||l>0&&i;)0!==a&&(0===l||!i||n.z<=i.z)?(o=n,n=n.nextZ,a--):(o=i,i=i.nextZ,l--),r?r.nextZ=o:t=o,o.prevZ=r,r=o;n=i}r.nextZ=null,c*=2}while(s>1)}(o)}(t,i,o,p);for(var d,h,y=t;t.prev!==t.next;)if(d=t.prev,h=t.next,p?l(t,i,o,p):a(t))e.push(d.i/n),e.push(t.i/n),e.push(h.i/n),S(t),t=h.next,y=h.next;else if((t=h)===y){f?1===f?s(t=c(t,e,n),e,n,i,o,p,2):2===f&&u(t,e,n,i,o,p):s(r(t),e,n,i,o,p,1);break}}}function a(t){var e=t.prev,n=t,i=t.next;if(x(e,n,i)>=0)return!1;for(var o=t.next.next;o!==t.prev;){if(h(e.x,e.y,n.x,n.y,i.x,i.y,o.x,o.y)&&x(o.prev,o,o.next)>=0)return!1;o=o.next}return!0}function l(t,e,n,i){var o=t.prev,r=t,s=t.next;if(x(o,r,s)>=0)return!1;for(var a=o.x<r.x?o.x<s.x?o.x:s.x:r.x<s.x?r.x:s.x,l=o.y<r.y?o.y<s.y?o.y:s.y:r.y<s.y?r.y:s.y,c=o.x>r.x?o.x>s.x?o.x:s.x:r.x>s.x?r.x:s.x,u=o.y>r.y?o.y>s.y?o.y:s.y:r.y>s.y?r.y:s.y,p=v(a,l,e,n,i),f=v(c,u,e,n,i),d=t.prevZ,y=t.nextZ;d&&d.z>=p&&y&&y.z<=f;){if(d!==t.prev&&d!==t.next&&h(o.x,o.y,r.x,r.y,s.x,s.y,d.x,d.y)&&x(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,y!==t.prev&&y!==t.next&&h(o.x,o.y,r.x,r.y,s.x,s.y,y.x,y.y)&&x(y.prev,y,y.next)>=0)return!1;y=y.nextZ}for(;d&&d.z>=p;){if(d!==t.prev&&d!==t.next&&h(o.x,o.y,r.x,r.y,s.x,s.y,d.x,d.y)&&x(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;y&&y.z<=f;){if(y!==t.prev&&y!==t.next&&h(o.x,o.y,r.x,r.y,s.x,s.y,y.x,y.y)&&x(y.prev,y,y.next)>=0)return!1;y=y.nextZ}return!0}function c(t,e,n){var i=t;do{var o=i.prev,r=i.next.next;!g(o,r)&&P(o,i,i.next,r)&&m(o,r)&&m(r,o)&&(e.push(o.i/n),e.push(i.i/n),e.push(r.i/n),S(i),S(i.next),i=t=r),i=i.next}while(i!==t);return i}function u(t,e,n,i,o,a){var l=t;do{for(var c=l.next.next;c!==l.prev;){if(l.i!==c.i&&y(l,c)){var u=b(l,c);return l=r(l,l.next),u=r(u,u.next),s(l,e,n,i,o,a),void s(u,e,n,i,o,a)}c=c.next}l=l.next}while(l!==t)}function p(t,e){return t.x-e.x}function f(t,e){if(e=function(t,e){var n,i=e,o=t.x,r=t.y,s=-1/0;do{if(r<=i.y&&r>=i.next.y&&i.next.y!==i.y){var a=i.x+(r-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(a<=o&&a>s){if(s=a,a===o){if(r===i.y)return i;if(r===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==e);if(!n)return null;if(o===s)return n.prev;var l,c=n,u=n.x,p=n.y,f=1/0;for(i=n.next;i!==c;)o>=i.x&&i.x>=u&&o!==i.x&&h(r<p?o:s,r,u,p,r<p?s:o,r,i.x,i.y)&&((l=Math.abs(r-i.y)/(o-i.x))<f||l===f&&i.x>n.x)&&m(i,t)&&(n=i,f=l),i=i.next;return n}(t,e)){var n=b(e,t);r(n,n.next)}}function v(t,e,n,i,o){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*o)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*o)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function d(t){var e=t,n=t;do{e.x<n.x&&(n=e),e=e.next}while(e!==t);return n}function h(t,e,n,i,o,r,s,a){return(o-s)*(e-a)-(t-s)*(r-a)>=0&&(t-s)*(i-a)-(n-s)*(e-a)>=0&&(n-s)*(r-a)-(o-s)*(i-a)>=0}function y(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&P(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&m(t,e)&&m(e,t)&&function(t,e){var n=t,i=!1,o=(t.x+e.x)/2,r=(t.y+e.y)/2;do{n.y>r!=n.next.y>r&&n.next.y!==n.y&&o<(n.next.x-n.x)*(r-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)}function x(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function g(t,e){return t.x===e.x&&t.y===e.y}function P(t,e,n,i){return!!(g(t,e)&&g(n,i)||g(t,i)&&g(n,e))||x(t,e,n)>0!=x(t,e,i)>0&&x(n,i,t)>0!=x(n,i,e)>0}function m(t,e){return x(t.prev,t,t.next)<0?x(t,e,t.next)>=0&&x(t,t.prev,e)>=0:x(t,e,t.prev)<0||x(t,t.next,e)<0}function b(t,e){var n=new C(t.i,t.x,t.y),i=new C(e.i,e.x,e.y),o=t.next,r=e.prev;return t.next=e,e.prev=t,n.next=o,o.prev=n,i.next=n,n.prev=i,r.next=i,i.prev=r,i}function L(t,e,n,i){var o=new C(t,e,n);return i?(o.next=i.next,o.prev=i,i.next.prev=o,i.next=o):(o.prev=o,o.next=o),o}function S(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function C(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function w(t,e,n,i){for(var o=0,r=e,s=n-i;r<n;r+=i)o+=(t[s]-t[r])*(t[r+1]+t[s+1]),s=r;return o}t.exports=i,t.exports.default=i,i.deviation=function(t,e,n,i){var o=e&&e.length,r=o?e[0]*n:t.length,s=Math.abs(w(t,0,r,n));if(o)for(var a=0,l=e.length;a<l;a++){var c=e[a]*n,u=a<l-1?e[a+1]*n:t.length;s-=Math.abs(w(t,c,u,n))}var p=0;for(a=0;a<i.length;a+=3){var f=i[a]*n,v=i[a+1]*n,d=i[a+2]*n;p+=Math.abs((t[f]-t[d])*(t[v+1]-t[f+1])-(t[f]-t[v])*(t[d+1]-t[f+1]))}return 0===s&&0===p?0:Math.abs((p-s)/s)},i.flatten=function(t){for(var e=t[0][0].length,n={vertices:[],holes:[],dimensions:e},i=0,o=0;o<t.length;o++){for(var r=0;r<t[o].length;r++)for(var s=0;s<e;s++)n.vertices.push(t[o][r][s]);o>0&&(i+=t[o-1].length,n.holes.push(i))}return n}},ctuC:function(t,e,n){"use strict";var i=n("1OyB"),o=n("vuIU"),r=n("md7G"),s=n("foSv"),a=n("ReuC"),l=n("Ji7U"),c=n("K7jV"),u=n("S2EH"),p=n("C7oE"),f=function(t){function e(t){var n=t.data,o=t.getGeometry,a=t.positionFormat,l=t.fp64;return Object(i.a)(this,e),Object(r.a)(this,Object(s.a)(e).call(this,{data:n,getGeometry:o,positionFormat:a,attributes:{startPositions:{size:3,padding:3,type:l?Float64Array:Float32Array},endPositions:{size:3,padding:3,type:l?Float64Array:Float32Array},segmentTypes:{size:1,type:Uint8ClampedArray},startPositions64XyLow:{size:2,padding:2,fp64Only:!0},endPositions64XyLow:{size:2,padding:2,fp64Only:!0}}}))}return Object(l.a)(e,t),Object(o.a)(e,[{key:"get",value:function(t){return this.attributes[t]}},{key:"getGeometrySize",value:function(t){var e=this.getPathLength(t);return e<2?0:this.isClosed(t)?e<3?0:e+1:e-1}},{key:"updateGeometryAttributes",value:function(t,e){var n=this.attributes,i=n.startPositions,o=n.endPositions,r=n.segmentTypes,s=e.geometrySize;if(0!==s)for(var a,l,c=this.isClosed(t),u=e.vertexStart,p=0;p<s;u++,p++)a=l||this.getPointOnPath(t,0),l=this.getPointOnPath(t,p+1),r[u]=0,0===p&&(r[u]+=c?4:1),p===s-1&&(r[u]+=c?4:2),i[3*u+3]=a[0],i[3*u+4]=a[1],i[3*u+5]=a[2]||0,o[3*u]=l[0],o[3*u+1]=l[1],o[3*u+2]=l[2]||0}},{key:"getPathLength",value:function(t){return Number.isFinite(t[0])?t.length/this.positionSize:t.length}},{key:"getPointOnPath",value:function(t,e){if(Number.isFinite(t[0])){var n=this.positionSize;return e*n>=t.length&&(e+=1-t.length/n),[t[e*n],t[e*n+1],3===n?t[e*n+2]:0]}return e>=t.length&&(e+=1-t.length),t[e]}},{key:"isClosed",value:function(t){var e=this.getPathLength(t),n=this.getPointOnPath(t,0),i=this.getPointOnPath(t,e-1);return n[0]===i[0]&&n[1]===i[1]&&n[2]===i[2]}}]),e}(n("qI7z").experimental.Tesselator);n.d(e,"a",(function(){return y}));var v=[0,0,0,255],d={widthUnits:"meters",widthScale:{type:"number",min:0,value:1},widthMinPixels:{type:"number",min:0,value:0},widthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},rounded:!1,miterLimit:{type:"number",min:0,value:4},dashJustified:!1,billboard:!1,getPath:{type:"accessor",value:function(t){return t.path}},getColor:{type:"accessor",value:v},getWidth:{type:"accessor",value:1},getDashArray:{type:"accessor",value:[0,0]}},h={enter:function(t,e){return e.length?e.subarray(e.length-t.length):t}},y=function(t){function e(){return Object(i.a)(this,e),Object(r.a)(this,Object(s.a)(e).apply(this,arguments))}return Object(l.a)(e,t),Object(o.a)(e,[{key:"getShaders",value:function(){return Object(a.a)(Object(s.a)(e.prototype),"getShaders",this).call(this,{vs:"#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec2 instanceLeftPositions64xyLow;\nattribute vec2 instanceStartPositions64xyLow;\nattribute vec2 instanceEndPositions64xyLow;\nattribute vec2 instanceRightPositions64xyLow;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec2 instanceDashArrays;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\nuniform bool billboard;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\nvec3 lineJoin(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  float relativePosition, bool isEnd, bool isJoint,\n  vec2 width, vec2 widthPixels\n) {\n  vec2 deltaA = (currPoint.xy - prevPoint.xy) / width;\n  vec2 deltaB = (nextPoint.xy - currPoint.xy) / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n  lenA = lenA > EPSILON ? lenA : 0.0;\n  lenB = lenB > EPSILON ? lenB : 0.0;\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n  vec2 tangent = vec2(dirA + dirB);\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  vec2 perp = isEnd ? perpA : perpB;\n  float L = isEnd ? lenA : lenB;\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  bool turnsRight = dirA.x * dirB.y > dirA.y * dirB.x;\n\n  float offsetScale = 1.0 / max(sinHalfA, EPSILON);\n\n  float cornerPosition = isJoint ?\n    0.0 :\n    flipIfTrue(turnsRight == (relativePosition > 0.0));\n  cornerPosition *=\n    float(cornerPosition <= 0.0 || sinHalfA < min(lenA, lenB) * cosHalfA);\n  if (cornerPosition < 0.0) {\n    offsetScale = min(offsetScale, L / max(cosHalfA, EPSILON));\n  }\n\n  vMiterLength = cornerPosition >= 0.0 ?\n    mix(offsetScale, 0.0, cornerPosition) :\n    offsetScale * cornerPosition;\n  vMiterLength -= sinHalfA * jointType;\n\n  float offsetDirection = mix(\n    positions.y,\n    mix(\n      flipIfTrue(turnsRight),\n      positions.y * flipIfTrue(turnsRight == (positions.x == 1.)),\n      cornerPosition\n    ),\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec, -tangent, step(0.5, cornerPosition));\n  offsetScale = mix(offsetScale, 1.0 / max(cosHalfA, 0.001), step(0.5, cornerPosition));\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n  cornerPosition = isCap ? (1.0 - positions.z) : 0.;\n  if (isStartCap) {\n    offsetVec = mix(dirB, perpB, cornerPosition);\n  }\n  if (isEndCap) {\n    offsetVec = mix(dirA, perpA, cornerPosition);\n  }\n  if (isCap) {\n    offsetScale = mix(4.0 * jointType, 1.0, cornerPosition);\n    vMiterLength = 1.0 - cornerPosition;\n    offsetDirection = mix(flipIfTrue(isStartCap), positions.y, cornerPosition);\n  }\n\n  vCornerOffset = offsetVec * offsetDirection * offsetScale;\n  vDashArray = instanceDashArrays;\n  vPathLength = L;\n  vec2 offsetFromStartOfPath = vCornerOffset;\n  if (isEnd) {\n    offsetFromStartOfPath += deltaA;\n  }\n  vec2 dir = isEnd ? dirA : dirB;\n  vPathPosition = vec2(\n    positions.y + positions.z * offsetDirection,\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(vCornerOffset * widthPixels * isValid, 0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  return currPoint + vec3(offset.xy / widthPixels * width, 0.0);\n}\nvec3 lineJoin(vec3 prevPoint, vec3 currPoint, vec3 nextPoint) {\n\n  float relativePosition = positions.y;\n  bool isEnd = positions.x > EPSILON;\n  bool isJoint = positions.z > EPSILON;\n\n  vec2 widthPixels = vec2(clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0);\n\n  vec2 width = billboard ? project_pixel_size_to_clipspace(widthPixels) : project_pixel_size(widthPixels);\n\n  return lineJoin(\n    prevPoint, currPoint, nextPoint,\n    relativePosition, isEnd, isJoint,\n    width, widthPixels\n  );\n}\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.worldPosition = instanceStartPositions;\n  geometry.worldPositionAlt = instanceEndPositions;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n  picking_setPickingColor(instancePickingColors);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec2 prevPosition64xyLow = mix(instanceLeftPositions64xyLow, instanceStartPositions64xyLow, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec2 currPosition64xyLow = mix(instanceStartPositions64xyLow, instanceEndPositions64xyLow, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec2 nextPosition64xyLow = mix(instanceEndPositions64xyLow, instanceRightPositions64xyLow, isEnd);\n\n  if (billboard) {\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64xyLow, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64xyLow, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64xyLow, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    vec3 pos = lineJoin(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w\n    );\n\n    gl_Position = vec4(pos * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    prevPosition = project_position(prevPosition, prevPosition64xyLow);\n    currPosition = project_position(currPosition, currPosition64xyLow);\n    nextPosition = project_position(nextPosition, nextPosition64xyLow);\n\n    vec4 pos = vec4(\n      lineJoin(prevPosition, currPosition, nextPosition),\n      1.0);\n    geometry.position = pos;\n    gl_Position = project_common_position_to_clipspace(pos);\n  }\n  DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n",fs:"#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float jointType;\nuniform float miterLimit;\nuniform float alignMode;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nfloat mod2(float a, float b) {\n  return a - floor(a / b) * b;\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\nbool dash_isFragInGap() {\n  float solidLength = vDashArray.x;\n  float gapLength = vDashArray.y;\n\n  float unitLength = solidLength + gapLength;\n\n  if (unitLength == 0.0) {\n    return false;\n  }\n\n  unitLength = mix(\n    unitLength,\n    vPathLength / round(vPathLength / unitLength),\n    alignMode\n  );\n\n  float offset = alignMode * solidLength / 2.0;\n\n  return gapLength > 0.0 &&\n    vPathPosition.y >= 0.0 &&\n    vPathPosition.y <= vPathLength &&\n    mod2(vPathPosition.y + offset, unitLength) > solidLength;\n}\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n  if (jointType > 0.0 && vMiterLength > 0.0 && length(vCornerOffset) > 1.0) {\n    discard;\n  }\n  if (jointType == 0.0 && vMiterLength > miterLimit) {\n    discard;\n  }\n  if (vColor.a == 0.0 || dash_isFragInGap()) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:["project32","picking"]})}},{key:"initializeState",value:function(){var t=this;this.getAttributeManager().addInstanced({startPositions:{size:3,offset:12,type:5130,fp64:this.use64bitPositions(),transition:h,accessor:"getPath",update:this.calculateStartPositions,noAlloc:!0,shaderAttributes:{instanceLeftPositions:{offset:0},instanceStartPositions:{offset:12}}},endPositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:h,accessor:"getPath",update:this.calculateEndPositions,noAlloc:!0,shaderAttributes:{instanceEndPositions:{offset:0},instanceRightPositions:{offset:12}}},instanceTypes:{size:1,type:5121,update:this.calculateSegmentTypes,noAlloc:!0},instanceStrokeWidths:{size:1,accessor:"getWidth",transition:h,defaultValue:1},instanceDashArrays:{size:2,accessor:"getDashArray"},instanceColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,accessor:"getColor",transition:h,defaultValue:v},instancePickingColors:{size:3,type:5121,accessor:function(e,n){var i=n.index,o=n.target;return t.encodePickingColor(i,o)}}}),this.setState({pathTesselator:new f({fp64:this.use64bitPositions()})})}},{key:"updateState",value:function(t){var n=t.oldProps,i=t.props,o=t.changeFlags;Object(a.a)(Object(s.a)(e.prototype),"updateState",this).call(this,{props:i,oldProps:n,changeFlags:o});var r=this.getAttributeManager();if(o.dataChanged||o.updateTriggersChanged&&(o.updateTriggersChanged.all||o.updateTriggersChanged.getPath)){var l=this.state.pathTesselator;l.updateGeometry({data:i.data,getGeometry:i.getPath,positionFormat:i.positionFormat,dataChanged:o.dataChanged}),this.setState({numInstances:l.instanceCount,bufferLayout:l.bufferLayout}),o.dataChanged||r.invalidateAll()}if(o.extensionsChanged){var c=this.context.gl;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(c)}),r.invalidateAll()}}},{key:"draw",value:function(t){var e=t.uniforms,n=this.context.viewport,i=this.props,o=i.rounded,r=i.billboard,s=i.miterLimit,a=i.widthUnits,l=i.widthScale,c=i.widthMinPixels,u=i.widthMaxPixels,p=i.dashJustified,f="pixels"===a?n.distanceScales.metersPerPixel[2]:1;this.state.model.setUniforms(Object.assign({},e,{jointType:Number(o),billboard:r,alignMode:Number(p),widthScale:l*f,miterLimit:s,widthMinPixels:c,widthMaxPixels:u})).draw()}},{key:"_getModel",value:function(t){return new u.a(t,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new p.a({drawMode:4,attributes:{indices:new Uint16Array([0,2,1,1,2,4,1,4,3,3,4,5]),positions:new Float32Array([0,0,1,0,-1,0,0,1,0,1,-1,0,1,1,0,1,0,1])}}),isInstanced:!0}))}},{key:"calculateStartPositions",value:function(t){var e=this.state.pathTesselator;t.bufferLayout=e.bufferLayout,t.value=e.get("startPositions")}},{key:"calculateEndPositions",value:function(t){var e=this.state.pathTesselator;t.bufferLayout=e.bufferLayout,t.value=e.get("endPositions")}},{key:"calculateSegmentTypes",value:function(t){var e=this.state.pathTesselator;t.bufferLayout=e.bufferLayout,t.value=e.get("segmentTypes")}}]),e}(c.a);y.layerName="PathLayer",y.defaultProps=d}}]);